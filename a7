import sys
import numpy as np
from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class MplCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.ax = fig.add_subplot(111)
        super().__init__(fig)
        self.setParent(parent)
        self.mpl_connect('motion_notify_event', self.on_hover)  # Connect to mouse hover event

    def on_hover(self, event):
        """ Capture the mouse hover event and trigger the vertical arrow update. """
        if event.xdata is not None and event.ydata is not None:
            self.parent().update_vertical_arrow(event.xdata)


class PlotWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Hover to Move and Resize Vertical Arrow")
        self.setGeometry(100, 100, 800, 600)

        # Create a central widget and set a layout
        widget = QWidget()
        layout = QVBoxLayout(widget)
        self.setCentralWidget(widget)

        # Create a Matplotlib canvas to embed in the PySide6 app
        self.canvas = MplCanvas(self, width=5, height=4, dpi=100)
        layout.addWidget(self.canvas)

        # Sample discrete x data (years) and y data
        self.x_data = np.linspace(0, 10, 101)  # Discrete x values
        self.y1 = np.sin(self.x_data)  # Sine wave for curve 1
        self.y2 = np.sin(self.x_data + 0.5) * 1.2  # Sine wave for curve 2

        # Plot data
        self.line1, = self.canvas.ax.plot(self.x_data, self.y1, label='Curve 1', color='blue', marker='o', linewidth=2)
        self.line2, = self.canvas.ax.plot(self.x_data, self.y2, label='Curve 2', color='red', marker='o', linewidth=2)

        # Add initial vertical double arrow and delta display
        self.vertical_arrow = None
        self.text_annotation = None

        # Customize the grid, labels, and title for a more professional appearance
        self.canvas.ax.set_title("Hover to Adjust Vertical Arrow", fontsize=14, fontweight='bold', color='darkblue')
        self.canvas.ax.set_xlabel("X-axis", fontsize=12)
        self.canvas.ax.set_ylabel("Value", fontsize=12)
        self.canvas.ax.grid(True, linestyle='--', alpha=0.7)

        # Add a legend
        self.canvas.ax.legend(loc="upper right")

        # Redraw the canvas to reflect changes
        self.canvas.draw()

    def update_vertical_arrow(self, x_hover):
        """
        Updates the vertical double arrow based on the hovered x position.
        """
        # Find the closest x_data value to the hovered x position
        index = np.argmin(np.abs(self.x_data - x_hover))

        # Get the corresponding x and y values for both curves at this index
        x_val = self.x_data[index]
        y1_val = self.y1[index]
        y2_val = self.y2[index]

        # Compute the delta between the curves
        delta = abs(y2_val - y1_val)

        # Remove the previous arrow and annotation if they exist
        if self.vertical_arrow:
            self.vertical_arrow.remove()
        if self.text_annotation:
            self.text_annotation.remove()

        # Draw a vertical double-headed arrow between the two curves at the hovered x-axis value
        self.vertical_arrow = self.canvas.ax.annotate(
            '', xy=(x_val, y1_val), xytext=(x_val, y2_val),
            arrowprops=dict(arrowstyle='<->', lw=2, color='black'),
        )

        # Display the delta between the two curves at the midpoint
        mid_y = (y1_val + y2_val) / 2
        self.text_annotation = self.canvas.ax.text(
            x_val, mid_y, f"Î” = {delta:.2f}",
            ha="center", va="center", fontsize=10, bbox=dict(facecolor='white', alpha=0.6)
        )

        # Redraw the canvas to update the plot
        self.canvas.draw()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_win = PlotWindow()
    main_win.show()
    sys.exit(app.exec())